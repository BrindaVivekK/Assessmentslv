# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sIH9ge15iCbwHzS8qfPprlO3BP-rhs2X

**KOTHA BRINDA VIVEK**
"""

#1
import pandas as pd
df=pd.read_csv('/content/Final Dataset - IPL.csv')
df.head()

df.info()

df.describe()

#no null values
dt=df.isnull().sum()
print(dt)

#2
#data cleaning-no null values
dt=df.isnull().sum()
print(dt)

#no.of duplicates in this dataset=0
dp=df.duplicated().sum()
print(dp)

"""As there are no duplicates,there are no rows droped

if we have to drop rows df=df.dropna()

if we have to drop cols df=df.dropna(axis=1)

or to fill empty with NA or 0

df.fillna('NA',inplace=True)

to fill with mean:


df.fillna(df.mean(),inplace=True)
"""

#to drop the duplicates--(no duplicates here so same no.of rows)
df.drop_duplicates()

"""No duplicates here

df.drop_duplicates() to drop the duplicate records

"""

#3 descriptive analysis-numerical date considered  is high_score
mean_highscore=df['highscore'].mean()
print('mean_highscore',mean_highscore)
median_highscore=df['highscore'].median()
print('mean_highscore',median_highscore)
range=[df['highscore'].min(),df['highscore'].max()]
print(range)
mode_highscore=df['highscore'].mode()
print('mode_highscore',mode_highscore)
st=df['highscore'].std()
print('standard deviation',st)
#central tendencies caluculated by mean,median,mode,---all are in the range of (68,71)

"""central tendencies caluculated by mean,median,mode,---all are in the range of (68,71)
so on an player(most) can get high score of 70

variance of data can be known from calculating the standard deviation
std dev=square root of variance
more variance--more complex to analyze the data or bulid a model

less variance--less complex to analyze the data or build a model


"""

#4
import matplotlib.pyplot as plt
import seaborn as sns
#print(df)
dt=pd.DataFrame(df)
#print(dt)
plt.figure(figsize=(10,6))
plt.xticks(rotation=90)
plt.title('Margin with with match winner team won')

sns.barplot(x='match_winner',y='margin',data=dt)

import matplotlib.pyplot as plt
import seaborn as sns
#print(df)
dt=pd.DataFrame(df)
sns.scatterplot(x='highscore',data=dt)

import matplotlib.pyplot as plt
import seaborn as sns
dt=df['match_winner'].value_counts().reset_index()
print(dt)
plt.figure(figsize=(10,6))
plt.title='Count of team wins'
sns.barplot(y='match_winner',x='count',data=dt)

import matplotlib.pyplot as plt
import seaborn as sns
dt=df.groupby('match_winner').aggregate({"won_by":"count"})
print(dt)

#6.outliers
plt.figure(figsize=(10,6))
plt.title='Margin range'
sns.boxplot(y='margin',data=df)
plt.show()

"""to find about outliers boxplot is the best plot,there are 8 outliers it means 8 cases in which margins are abnormally high

we can remove outliers to find a reasonable cetral tendencies and to know correct covvariance between the columns
"""

#7
import matplotlib.pyplot as plt
import seaborn as sns
#print(df)
dt=df['match_winner'].value_counts().reset_index()
dt['venue']=df['venue']

print(dt)
plt.title='Frequency of players getting player of the match'
sns.barplot(x='match_winner',y='venue',data=dt.head(),color='purple')

#8 PLAYER OF THE MATCH
import matplotlib.pyplot as plt
import seaborn as sns
#print(df)
dt=df['player_of_the_match'].value_counts().reset_index()
#print(dt)
plt.title='Frequency of players getting player of the match'
sns.barplot(x='player_of_the_match',y='count',data=dt.head(),color='purple')

"""Kuldeep yadav wins the player of the match award 4 times -hey is a key player with high performance


"""

#BEST BOWLING
import matplotlib.pyplot as plt
import seaborn as sns
#print(df)
dt=df['best_bowling'].value_counts().reset_index()
#print(dt)
plt.figure(figsize=(10,6))
sns.barplot(y='best_bowling',x='count',data=dt.head(10),color='purple')

"""Kuldeep yadav is best bowler so that is the reason he might win player of the match 4 times"""

import matplotlib.pyplot as plt
import seaborn as sns
#print(df)
dt=df['top_scorer'].value_counts().reset_index()
#print(dt)
plt.title='Frequency of players getting player of the match'
sns.barplot(y='top_scorer',x='count',data=dt.head(10),color='purple')

"""Some of the player of the match are bowlers and some of them are top scorers

top_scorers are not best_bowlers because top scorers bat anf best bowlers bowl,their intersection is zero

according to the circumstance of match the winner(pom) is declared

either a player is very good scorer or a very good bowler and mostly not both according to this

"""

#9Data discovery:

"""9)Data discovery:

1)top scorers are not best bowlers

2)player of the match is either top scorer or best bowler

3)outcome is the dependency of the winner of team by tosswin,good players,wickets,runs


"""