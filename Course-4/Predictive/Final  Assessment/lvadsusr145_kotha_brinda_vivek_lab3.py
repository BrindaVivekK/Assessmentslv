# -*- coding: utf-8 -*-
"""LVADSUSR145_Kotha Brinda_Vivek_lab3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c4uN8g2G8wvaEnBRcPghKpZdAFuSdS5R

**KOTHA BRINDA VIVEK**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#import dataset
df=pd.read_csv('/content/customer_segmentation.csv')

df.head()

df.info()

df.describe(include="all")

numerical_cols=df.select_dtypes(include=['int64','float64']).columns
numerical_cols

corr_mat=df[numerical_cols].corr()
plt.figure(figsize=(20,15))
sns.heatmap(corr_mat,annot=True)

df.isnull().sum()

df.shape

#drop null if there
df.dropna(axis=0,inplace=True)

df.isnull().sum()

df.duplicated().sum()

df.drop_duplicates()

num_cols=df.select_dtypes(include=['int64','float64'])
corr_mat=num_cols.corr()
plt.figure(figsize=(20,15))
sns.heatmap(corr_mat,annot=True)

cat_cols=df.select_dtypes(include='object')
from sklearn.preprocessing import LabelEncoder
lb_en=LabelEncoder()
for c in cat_cols:
  df[c]=lb_en.fit_transform(df[c])

#outlier_detection
#if any outliers:
for c in num_cols:
  plt.figure(figsize=(10,5))
  sns.boxplot(df[c])

#removing outliers:
for column in df.select_dtypes(include = "number"):
  q1 = df[column].quantile(0.25)
  q3 = df[column].quantile(0.75)
  iqr = q3-q1
  lower = q1 - 1.5*iqr
  upper = q3 + 1.5* iqr
  df[column] = df[column].clip(lower = lower, upper= upper)

for c in num_cols:
  plt.figure(figsize=(10,5))
  sns.boxplot(df[c])

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
df=pd.DataFrame(scaler.fit_transform(df),columns=df.columns)

df.columns

features=df.drop(columns=['Z_CostContact','Z_Revenue'],axis=1)
features

#k value
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

k_values = range(2, 10)
wcss_scores = []
silhouette_scores = []
for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(features)
    wcss_scores.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(features, kmeans.labels_))

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(k_values, wcss_scores, 'bo-')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('WCSS')
plt.title('Elbow Method')

plt.subplot(1, 2, 2)
plt.plot(k_values, silhouette_scores, 'ro-')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Score Method')
plt.tight_layout()
plt.show()

#k means model
kmeans = KMeans(n_clusters=4, random_state=42)
df['cluster'] = kmeans.fit_predict(features)

df

df['Response'].value_counts()

df.dropna(axis=0,inplace=True)

df1=df[df.cluster==0]
df2=df[df.cluster==1]
df3=df[df.cluster==2]
df4=df[df.cluster==3]
plt.scatter(df1['Recency'],df1['Income'])
plt.scatter(df2['Recency'],df2['Income'])
plt.scatter(df3['Recency'],df3['Income'])
plt.scatter(df4['Recency'],df4['Income'])
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.xlabel('Recency')
plt.ylabel('Income')
plt.legend()

#clusters insights
'''0-less income and decent recency
1-medium income and medium recency
2-high income and any recency
3-very high income and of any receny'''